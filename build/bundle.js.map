{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/enums.ts","../../src/settings.ts","../../node_modules/svelte/store/index.mjs","../../src/stores.ts","../../src/Tile.svelte","../../src/utils.ts","../../src/Board.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export var STATE;\n(function (STATE) {\n    STATE[STATE[\"closed\"] = 0] = \"closed\";\n    STATE[STATE[\"flag\"] = 1] = \"flag\";\n    STATE[STATE[\"question\"] = 2] = \"question\";\n    STATE[STATE[\"flat\"] = 3] = \"flat\";\n    STATE[STATE[\"open\"] = 4] = \"open\";\n    STATE[STATE[\"wrong_flag\"] = 5] = \"wrong_flag\";\n})(STATE || (STATE = {}));\nexport var NUM;\n(function (NUM) {\n    NUM[NUM[\"zero\"] = 0] = \"zero\";\n    NUM[NUM[\"one\"] = 1] = \"one\";\n    NUM[NUM[\"two\"] = 2] = \"two\";\n    NUM[NUM[\"three\"] = 3] = \"three\";\n    NUM[NUM[\"four\"] = 4] = \"four\";\n    NUM[NUM[\"five\"] = 5] = \"five\";\n    NUM[NUM[\"six\"] = 6] = \"six\";\n    NUM[NUM[\"seven\"] = 7] = \"seven\";\n    NUM[NUM[\"eight\"] = 8] = \"eight\";\n})(NUM || (NUM = {}));\nexport var ACTION;\n(function (ACTION) {\n    ACTION[ACTION[\"OPEN\"] = 0] = \"OPEN\";\n    ACTION[ACTION[\"FLAG\"] = 2] = \"FLAG\";\n})(ACTION || (ACTION = {}));\nexport var GAMESTATE;\n(function (GAMESTATE) {\n    GAMESTATE[GAMESTATE[\"WON\"] = 0] = \"WON\";\n    GAMESTATE[GAMESTATE[\"LOST\"] = 1] = \"LOST\";\n    GAMESTATE[GAMESTATE[\"ACTIVE\"] = 2] = \"ACTIVE\";\n    GAMESTATE[GAMESTATE[\"UNSTARTED\"] = 3] = \"UNSTARTED\";\n})(GAMESTATE || (GAMESTATE = {}));\n","import { ACTION } from \"./enums\";\nexport const settings = {\n    width: 10,\n    height: 10,\n    question: false,\n    bombs: 10,\n    primary_action: ACTION.FLAG\n};\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from \"svelte/store\";\nimport { GAMESTATE } from \"./enums\";\nexport const gameState = writable(GAMESTATE.UNSTARTED);\nexport const flagged = writable(0);\n","<svelte:options accessors immutable />\n\n<script context=\"module\" lang=\"ts\">\n\timport { settings } from \"./settings\";\n\timport { STATE, NUM, ACTION, GAMESTATE } from \"./enums\";\n\timport { createEventDispatcher, onDestroy } from \"svelte\";\n\timport { gameState, flagged } from \"./stores\";\n</script>\n\n<script lang=\"ts\">\n\texport let row: number;\n\texport let col: number;\n\texport let neighbors = [];\n\texport let state: STATE = STATE.closed;\n\texport let bomb = false;\n\tlet adjacent_bombs = null;\n\tlet exploded = false;\n\n\tconst dispatch = createEventDispatcher();\n\n\texport function calculateBombs() {\n\t\tif (adjacent_bombs === null) {\n\t\t\tadjacent_bombs = neighbors.reduce((p, c) => (c.bomb ? p + 1 : p), 0);\n\t\t\tif (!bomb) {\n\t\t\t\topen();\n\t\t\t}\n\t\t}\n\t}\n\texport function flatten() {\n\t\tif (state === STATE.closed) {\n\t\t\tstate = STATE.flat;\n\t\t} else if (state === STATE.flat) {\n\t\t\tstate = STATE.closed;\n\t\t}\n\t}\n\texport function open(recurse = true) {\n\t\tif (state === STATE.closed) {\n\t\t\tif (bomb) {\n\t\t\t\t$gameState = GAMESTATE.LOST;\n\t\t\t\texploded = true;\n\t\t\t} else {\n\t\t\t\tdispatch(\"clicked\", { row, col, neighbors });\n\t\t\t\tif (adjacent_bombs === null) {\n\t\t\t\t\tadjacent_bombs = neighbors.reduce((p, c) => (c.bomb ? p + 1 : p), 0);\n\t\t\t\t}\n\t\t\t\tif (adjacent_bombs === 0) {\n\t\t\t\t\tneighbors.forEach((e) => e.calculateBombs());\n\t\t\t\t}\n\t\t\t}\n\t\t\tstate = STATE.open;\n\t\t} else if (state === STATE.open && recurse) {\n\t\t\tconst flags = neighbors.reduce((p, c) => (c.state === STATE.flag ? p + 1 : p), 0);\n\t\t\tif (flags >= adjacent_bombs) {\n\t\t\t\tneighbors.forEach((e) => e.open(false));\n\t\t\t}\n\t\t}\n\t}\n\texport function unflattenNeighbors(e: MouseEvent) {\n\t\tif (e.button === 0) {\n\t\t\tneighbors.forEach((e) => e.flatten());\n\t\t}\n\t}\n\tfunction flattenNeighbors(e: MouseEvent) {\n\t\tconsole.log(e.button, settings.primary_action);\n\t\tif (e.button === 0 && state === STATE.open && adjacent_bombs) {\n\t\t\tdispatch(\"flatten\", { row, col });\n\t\t\tneighbors.forEach((e) => e.flatten());\n\t\t}\n\t}\n\tfunction flag() {\n\t\tswitch (state) {\n\t\t\tcase STATE.closed:\n\t\t\t\tif ($flagged < settings.bombs) {\n\t\t\t\t\tstate = STATE.flag;\n\t\t\t\t\t$flagged += 1;\n\t\t\t\t} else if (settings.question) {\n\t\t\t\t\tstate = STATE.question;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase STATE.flag:\n\t\t\t\tstate = settings.question ? STATE.question : STATE.closed;\n\t\t\t\t$flagged -= 1;\n\t\t\t\tbreak;\n\t\t\tcase STATE.question:\n\t\t\t\tstate = STATE.closed;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tfunction leftClick() {\n\t\tif ($gameState === GAMESTATE.ACTIVE) {\n\t\t\tif (settings.primary_action === ACTION.OPEN) open();\n\t\t\telse flag();\n\t\t} else if ($gameState === GAMESTATE.UNSTARTED) open();\n\t}\n\tfunction rightClick() {\n\t\tif ($gameState === GAMESTATE.ACTIVE) {\n\t\t\tif (settings.primary_action === ACTION.OPEN) flag();\n\t\t\telse open();\n\t\t} else if ($gameState === GAMESTATE.UNSTARTED) open();\n\t}\n\n\tconst unsub = gameState.subscribe((gs) => {\n\t\tif (gs === GAMESTATE.LOST) {\n\t\t\tif (state === STATE.closed && bomb) state = STATE.open;\n\t\t\telse if (state === STATE.flag && !bomb) state = STATE.wrong_flag;\n\t\t}\n\t});\n\tonDestroy(unsub);\n</script>\n\n<span\n\tclass=\"tile {NUM[adjacent_bombs] || ''} {STATE[state]}\"\n\tclass:exploded\n\ton:click={leftClick}\n\ton:contextmenu|preventDefault={rightClick}\n\ton:mousedown={flattenNeighbors}\n>\n\t{#if state === STATE.flag || state === STATE.wrong_flag}\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 11 11\">\n\t\t\t<path d=\"M2 10v-1h1v-1h2v-3h1v3h2v1h1v1z\" fill=\"#000\" />\n\t\t\t<path d=\"M2 3.5l4-2.5v5z\" fill=\"red\" />\n\t\t\t{#if state === STATE.wrong_flag}\n\t\t\t\t<path d=\"M0 0L11 11zM0 11L11 0\" stroke=\"#000\" stroke-width=\"0.5\" />\n\t\t\t{/if}\n\t\t</svg>\n\t{:else if state === STATE.question}\n\t\t?\n\t{:else if state === STATE.open}\n\t\t{#if bomb}\n\t\t\t<img class=\"bomb\" src=\"./img/bomb.svg\" alt=\"bomb\" />\n\t\t{:else}\n\t\t\t{adjacent_bombs ? adjacent_bombs : \"\"}\n\t\t{/if}\n\t{/if}\n</span>\n\n<style lang=\"scss\">\n\t.tile {\n\t\tbackground: var(--board-color);\n\t\tdisplay: inline-block;\n\t\twidth: 2.2rem;\n\t\taspect-ratio: 1;\n\t\toverflow: hidden;\n\t\tborder: 0.2rem solid;\n\t\tborder-top-color: white;\n\t\tborder-left-color: white;\n\t\tborder-right-color: #7e7e7e;\n\t\tborder-bottom-color: #7e7e7e;\n\t\tfont-weight: bold;\n\t\tfont-size: 2rem;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tcursor: pointer;\n\t\t&.closed:active,\n\t\t&.open,\n\t\t&.flat {\n\t\t\tborder: 0.5px solid #7e7e7e;\n\t\t}\n\t\t&.exploded {\n\t\t\tbackground: var(--red);\n\t\t}\n\t}\n\t.bomb {\n\t\twidth: 90%;\n\t}\n\t.one {\n\t\tcolor: #0b0ad5;\n\t}\n\t.two {\n\t\tcolor: #007c00;\n\t}\n\t.three {\n\t\tcolor: #d60000;\n\t}\n\t.four {\n\t\tcolor: #100973;\n\t}\n\t.five {\n\t\tcolor: #680c0d;\n\t}\n\t.six {\n\t\tcolor: #227d6c;\n\t}\n\t.seven {\n\t\tcolor: #000;\n\t}\n\t.eight {\n\t\tcolor: #7f7f7f;\n\t}\n</style>\n","/**\n * Return a random integer between zero and max (exclusive)\n * @param max - The upper bounds for the random number\n */\nexport function randint(max) {\n    return Math.floor(Math.random() * max);\n}\n","<script lang=\"ts\">\n\timport { onMount } from \"svelte\";\n\timport { GAMESTATE, STATE } from \"./enums\";\n\n\timport { settings } from \"./settings\";\n\timport { flagged, gameState } from \"./stores\";\n\timport Tile from \"./Tile.svelte\";\n\timport { randint } from \"./utils\";\n\n\texport const tiles: Tile[][] = new Array(settings.height).fill(null).map(() => []);\n\tlet remaining = settings.width * settings.height;\n\n\tfunction generateBombs(row: number, col: number, dontBomb: Tile[]) {\n\t\tconst possibleBombs = new Array(settings.width * settings.height)\n\t\t\t.fill(null)\n\t\t\t.map((_, i) => i);\n\t\tconst restricted = new Set<number>();\n\t\trestricted.add(col + row * settings.width);\n\t\tdontBomb.forEach((t: Tile) => restricted.add(t.col + t.row * settings.width));\n\t\tfor (let i = 0; i < settings.bombs; ++i) {\n\t\t\tlet choice = randint(possibleBombs.length);\n\t\t\twhile (restricted.has(possibleBombs[choice])) {\n\t\t\t\tpossibleBombs.splice(choice, 1);\n\t\t\t\tchoice = randint(possibleBombs.length);\n\t\t\t}\n\t\t\tconst bomb = possibleBombs.splice(choice, 1)[0];\n\t\t\ttiles[Math.floor(bomb / settings.width)][bomb % settings.width].bomb = true;\n\t\t}\n\t}\n\n\tfunction clicked(e: CustomEvent) {\n\t\tif ($gameState === GAMESTATE.UNSTARTED) {\n\t\t\t$gameState = GAMESTATE.ACTIVE;\n\t\t\tgenerateBombs(e.detail.row, e.detail.col, e.detail.neighbors);\n\t\t}\n\t\tremaining -= 1;\n\t\tif (remaining === settings.bombs) {\n\t\t\t$gameState = GAMESTATE.WON;\n\t\t\tfor (const row of tiles) {\n\t\t\t\trow.forEach((tile) => {\n\t\t\t\t\tif (tile.bomb && tile.state !== STATE.flag) {\n\t\t\t\t\t\ttile.state = STATE.flag;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tflagged.set(settings.bombs);\n\t\t}\n\t}\n\n\tonMount(() => {\n\t\tfor (let row = 0; row < tiles.length; ++row) {\n\t\t\tfor (let col = 0; col < tiles[row].length; ++col) {\n\t\t\t\tconst neighbors = [];\n\t\t\t\tfor (let i = -1; i <= 1; ++i) {\n\t\t\t\t\tfor (let j = -1; j <= 1; ++j) {\n\t\t\t\t\t\tif ((i || j) && tiles[row + i] && tiles[row + i][col + j]) {\n\t\t\t\t\t\t\tneighbors.push(tiles[row + i][col + j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttiles[row][col].neighbors = neighbors;\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n<div\n\tclass=\"board\"\n\tclass:disabled={$gameState === GAMESTATE.WON || $gameState === GAMESTATE.LOST}\n\tstyle=\"grid-template: repeat({settings.height}, 1fr) / repeat({settings.width}, 1fr)\"\n>\n\t{#each Array(settings.height) as _, i}\n\t\t{#each Array(settings.width) as _, j}\n\t\t\t<Tile bind:this={tiles[i][j]} row={i} col={j} on:clicked={clicked} on:flatten />\n\t\t{/each}\n\t{/each}\n</div>\n\n<style>\n\t.board {\n\t\twidth: fit-content;\n\t\tdisplay: grid;\n\t}\n\t.disabled {\n\t\tpointer-events: none;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport Board from \"./Board.svelte\";\n\timport { flagged, gameState } from \"./stores\";\n\timport { settings } from \"./settings\";\n\timport { onDestroy } from \"svelte\";\n\timport { GAMESTATE } from \"./enums\";\n\timport type Tile from \"./Tile.svelte\";\n\n\tsettings.bombs = 10;\n\tsettings.width = 10;\n\tsettings.height = 10;\n\n\tlet active_tile: Tile = null;\n\tlet board: Board;\n\tlet anticipating = false;\n\n\tlet started: number;\n\tlet timer: number;\n\tlet time = \"00:00\";\n\n\tconst unsub = gameState.subscribe((gs) => {\n\t\tswitch (gs) {\n\t\t\tcase GAMESTATE.ACTIVE:\n\t\t\t\tstarted = new Date().getTime();\n\t\t\t\ttimer = setInterval(() => {\n\t\t\t\t\tconst t = new Date().getTime() - started;\n\t\t\t\t\tconst hours = Math.floor(t / 3600000);\n\t\t\t\t\ttime = hours\n\t\t\t\t\t\t? `${hours}:`.padStart(3, \"0\")\n\t\t\t\t\t\t: \"\" +\n\t\t\t\t\t\t  `${Math.floor((t % 3600000) / 60000)}:`.padStart(3, \"0\") +\n\t\t\t\t\t\t  `${Math.floor((t % 60000) / 1000)}`.padStart(2, \"0\");\n\t\t\t\t}, 1000);\n\t\t\t\tbreak;\n\t\t\tcase GAMESTATE.WON:\n\t\t\tcase GAMESTATE.LOST:\n\t\t\t\tclearInterval(timer);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tfunction mouseup(e: MouseEvent) {\n\t\tif (\n\t\t\te.button === settings.primary_action &&\n\t\t\t(e.target as HTMLElement).classList.contains(\"tile\")\n\t\t) {\n\t\t\tanticipating = false;\n\t\t}\n\t\tif (active_tile) {\n\t\t\tactive_tile.unflattenNeighbors(e);\n\t\t\tactive_tile = null;\n\t\t}\n\t}\n\n\tfunction mousedown(e: MouseEvent) {\n\t\tif (\n\t\t\te.button === settings.primary_action &&\n\t\t\t(e.target as HTMLElement).classList.contains(\"tile\")\n\t\t) {\n\t\t\tanticipating = true;\n\t\t}\n\t}\n\n\tonDestroy(unsub);\n</script>\n\n<svelte:body on:mousedown={mousedown} on:mouseup={mouseup} />\n\n<main>\n\t<header>\n\t\t<h2>{settings.bombs - $flagged}</h2>\n\t\t<h2>\n\t\t\t{#if $gameState === GAMESTATE.WON}\n\t\t\t\t😎\n\t\t\t{:else if $gameState === GAMESTATE.LOST}\n\t\t\t\t😖\n\t\t\t{:else if anticipating}\n\t\t\t\t😮\n\t\t\t{:else}\n\t\t\t\t🙂\n\t\t\t{/if}\n\t\t</h2>\n\t\t<h2>{time}</h2>\n\t</header>\n\t<Board\n\t\tbind:this={board}\n\t\ton:flatten={(e) => (active_tile = board.tiles[e.detail.row][e.detail.col])}\n\t/>\n</main>\n\n<style>\n\theader {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t}\n\th2 {\n\t\tflex: 1;\n\t}\n</style>\n","import App from \"./App.svelte\";\nexport default new App({\n    target: document.body,\n    props: {\n    // version: \"1.2.3\",\n    }\n});\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","not_equal","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","set_store_value","ret","value","set","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","toggle_class","toggle","classList","set_current_component","get_current_component","Error","onDestroy","createEventDispatcher","type","detail","bubbles","e","createEvent","initCustomEvent","custom_event","slice","call","bubble","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","STATE","NUM","ACTION","GAMESTATE","settings","width","height","question","bombs","primary_action","FLAG","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","size","gameState","UNSTARTED","flagged","create_if_block_4","wrong_flag","create_if_block_1","svg","path0","path1","t","t_value","element_src","url","href","img","path","flag","create_if_block","create_if_block_2","open","create_if_block_3","span","span_class_value","preventDefault","row","col","neighbors","state","closed","bomb","adjacent_bombs","exploded","dispatch","recurse","$gameState","LOST","$$invalidate","reduce","calculateBombs","$flagged","gs","console","log","button","flatten","ACTIVE","OPEN","flat","randint","max","Math","floor","random","tile_props","each_blocks","key","important","div","style","removeProperty","setProperty","WON","tiles","remaining","j","dontBomb","possibleBombs","_","restricted","choice","generateBombs","tile","$$value","main","header","h20","h21","h22","t1","t1_value","board","started","timer","active_tile","anticipating","time","Date","getTime","setInterval","hours","padStart","clearInterval","contains","unflattenNeighbors","body"],"mappings":"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"}